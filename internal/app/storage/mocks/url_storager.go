// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	storage "github.com/thorgnir-go-study/go-musthave-shortener/internal/app/storage"
)

// URLStorager is an autogenerated mock type for the URLStorager type
type URLStorager struct {
	mock.Mock
}

// Load provides a mock function with given fields: key
func (_m *URLStorager) Load(key string) (storage.URLEntity, error) {
	ret := _m.Called(key)

	var r0 storage.URLEntity
	if rf, ok := ret.Get(0).(func(string) storage.URLEntity); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(storage.URLEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadByUserID provides a mock function with given fields: userID
func (_m *URLStorager) LoadByUserID(userID string) ([]storage.URLEntity, error) {
	ret := _m.Called(userID)

	var r0 []storage.URLEntity
	if rf, ok := ret.Get(0).(func(string) []storage.URLEntity); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.URLEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *URLStorager) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: urlEntity
func (_m *URLStorager) Store(urlEntity storage.URLEntity) error {
	ret := _m.Called(urlEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.URLEntity) error); ok {
		r0 = rf(urlEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreBatch provides a mock function with given fields: ctx, entitiesBatch
func (_m *URLStorager) StoreBatch(ctx context.Context, entitiesBatch []storage.URLEntity) error {
	ret := _m.Called(ctx, entitiesBatch)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []storage.URLEntity) error); ok {
		r0 = rf(ctx, entitiesBatch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
