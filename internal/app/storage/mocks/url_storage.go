// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	storage "github.com/thorgnir-go-study/go-musthave-shortener/internal/app/storage"
)

// URLStorage is an autogenerated mock type for the URLStorage type
type URLStorage struct {
	mock.Mock
}

// Load provides a mock function with given fields: userID
func (_m *URLStorage) Load(userID string) (storage.URLEntity, error) {
	ret := _m.Called(userID)

	var r0 storage.URLEntity
	if rf, ok := ret.Get(0).(func(string) storage.URLEntity); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(storage.URLEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadByUserID provides a mock function with given fields: userID
func (_m *URLStorage) LoadByUserID(userID string) ([]storage.URLEntity, error) {
	ret := _m.Called(userID)

	var r0 []storage.URLEntity
	if rf, ok := ret.Get(0).(func(string) []storage.URLEntity); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.URLEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *URLStorage) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: originalURL, userID
func (_m *URLStorage) Store(originalURL string, userID string) (string, error) {
	ret := _m.Called(originalURL, userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(originalURL, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(originalURL, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
