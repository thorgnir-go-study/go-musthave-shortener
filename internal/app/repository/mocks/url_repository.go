// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	repository "github.com/thorgnir-go-study/go-musthave-shortener/internal/app/repository"
)

// URLRepository is an autogenerated mock type for the URLRepository type
type URLRepository struct {
	mock.Mock
}

// DeleteURLs provides a mock function with given fields: ctx, userID, ids
func (_m *URLRepository) DeleteURLs(ctx context.Context, userID string, ids []string) error {
	ret := _m.Called(ctx, userID, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, userID, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Load provides a mock function with given fields: ctx, key
func (_m *URLRepository) Load(ctx context.Context, key string) (repository.URLEntity, error) {
	ret := _m.Called(ctx, key)

	var r0 repository.URLEntity
	if rf, ok := ret.Get(0).(func(context.Context, string) repository.URLEntity); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(repository.URLEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadByUserID provides a mock function with given fields: ctx, userID
func (_m *URLRepository) LoadByUserID(ctx context.Context, userID string) ([]repository.URLEntity, error) {
	ret := _m.Called(ctx, userID)

	var r0 []repository.URLEntity
	if rf, ok := ret.Get(0).(func(context.Context, string) []repository.URLEntity); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.URLEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *URLRepository) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: ctx, urlEntity
func (_m *URLRepository) Store(ctx context.Context, urlEntity repository.URLEntity) error {
	ret := _m.Called(ctx, urlEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.URLEntity) error); ok {
		r0 = rf(ctx, urlEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreBatch provides a mock function with given fields: ctx, entitiesBatch
func (_m *URLRepository) StoreBatch(ctx context.Context, entitiesBatch []repository.URLEntity) error {
	ret := _m.Called(ctx, entitiesBatch)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []repository.URLEntity) error); ok {
		r0 = rf(ctx, entitiesBatch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
